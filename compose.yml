name: chult
services:
  web:
    container_name: chult-web
    build:
      context: .
      args:
        DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}'

        # Build-time variables (baked into compiled code via $env/static/*)
        PUBLIC_MAX_IMAGE_SIZE: '${PUBLIC_MAX_IMAGE_SIZE}'
        PRIVATE_DM_TOKEN: '${PRIVATE_DM_TOKEN}'
        IMGPROXY_KEY: '${IMGPROXY_KEY}'
        IMGPROXY_SALT: '${IMGPROXY_SALT}'
        IMGPROXY_URL: '${IMGPROXY_URL}'
    restart: unless-stopped
    environment:
      # Database (via PgBouncer)
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:5432/${POSTGRES_DB}'

      # Application secrets
      PRIVATE_DM_TOKEN: '${PRIVATE_DM_TOKEN}'

      # Imgproxy configuration
      IMGPROXY_KEY: '${IMGPROXY_KEY}'
      IMGPROXY_SALT: '${IMGPROXY_SALT}'
      IMGPROXY_URL: '${IMGPROXY_URL}'

      # File uploads
      PUBLIC_MAX_IMAGE_SIZE: '${PUBLIC_MAX_IMAGE_SIZE}'
      BODY_SIZE_LIMIT: '${PUBLIC_MAX_IMAGE_SIZE}'

      # Node.js runtime optimizations
      NODE_ENV: production
      UV_THREADPOOL_SIZE: 128
      NODE_OPTIONS: --max-old-space-size=1536
    volumes:
      - /mnt/dietpi_userdata/chult/uploads:/app/uploads
    tmpfs:
      - /tmp:mode=1777,size=256M # Fast temporary storage
    depends_on:
      pgbouncer:
        condition: service_healthy
    ports:
      - 9007:3000
    networks:
      - backend
      - frontend
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3000']
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  imgproxy:
    container_name: chult-imgproxy
    image: ghcr.io/imgproxy/imgproxy:latest
    environment:
      # Basic config
      IMGPROXY_BIND: '0.0.0.0:8080'
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /var/lib/imgproxy
      IMGPROXY_USE_ETAG: 'true'
      IMGPROXY_TTL: 3600

      # Security - generate these with: openssl rand -hex 64
      IMGPROXY_KEY: '${IMGPROXY_KEY}'
      IMGPROXY_SALT: '${IMGPROXY_SALT}'
      IMGPROXY_SIGNATURE_SIZE: 32

      # Format settings
      IMGPROXY_AUTO_WEBP: 'true'
      IMGPROXY_ENFORCE_WEBP: 'true'
      IMGPROXY_AUTO_AVIF: 'true'
      IMGPROXY_AVIF_SPEED: 8 # Faster AVIF encoding

      # TIMEOUT SETTINGS - key for large images
      IMGPROXY_TIMEOUT: 60
      IMGPROXY_READ_REQUEST_TIMEOUT: 60
      IMGPROXY_DOWNLOAD_TIMEOUT: 60
      IMGPROXY_KEEP_ALIVE_TIMEOUT: 10

      # Processing optimization
      IMGPROXY_STRIP_METADATA: 'true' # Remove metadata for smaller files
      IMGPROXY_STRIP_COLOR_PROFILE: 'true' # Remove color profile
      IMGPROXY_RETURN_ATTACHMENT: 'false' # Faster delivery

      # Limits for large D&D maps
      IMGPROXY_MAX_SRC_FILE_SIZE: '${PUBLIC_MAX_IMAGE_SIZE}' # 50MB
      IMGPROXY_MAX_SRC_DIMENSION: 16000 # 16000px (was 8000px)
      IMGPROXY_MAX_SRC_RESOLUTION: 268435456 # 268MP (16384x16384)
      IMGPROXY_MAX_ANIMATION_FRAMES: 1 # Static maps only

      # Performance
      IMGPROXY_WORKERS: 1
      IMGPROXY_MAX_CLIENTS: 50
      IMGPROXY_PRESETS: 'thumbnail=resize:fit:300:300:0:0/quality:70,small=resize:fit:800:800:0:0/quality:80,medium=resize:fit:1280:1280:0:0/quality:85,large=resize:fit:1920:1920:0:0/quality:90'

      # Caching
      IMGPROXY_CACHE_CONTROL_PASSTHROUGH: 'true'
      IMGPROXY_SET_CANONICAL_HEADER: 'true'
    volumes:
      - ./uploads:/var/lib/imgproxy:ro # Read-only access to uploads
      - imgproxy_cache:/tmp/imgproxy # Named volume for better performance
    ports:
      - '9008:8080'
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8080/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  pgbouncer:
    container_name: chult-pgbouncer
    image: edoburu/pgbouncer:latest
    environment:
      DATABASE_URL: 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      AUTH_TYPE: scram-sha-256 # Support Postgres 16 SCRAM authentication
      # For healthcheck
      PGUSER: '${POSTGRES_USER}'
      PGPASSWORD: '${POSTGRES_PASSWORD}'
      PGDATABASE: '${POSTGRES_DB}'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'psql -h localhost -p 5432 -c "SELECT 1" || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=100
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  postgres-backup:
    container_name: chult-backup
    image: prodrigestivill/postgres-backup-local
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SCHEDULE: '@daily' # Run at midnight
      BACKUP_KEEP_DAYS: 7 # Keep 7 days
      BACKUP_KEEP_WEEKS: 4 # Keep 4 weeks
      BACKUP_KEEP_MONTHS: 6 # Keep 6 months
      HEALTHCHECK_PORT: 8080
    volumes:
      - /mnt/dietpi_userdata/chult/backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    user: postgres:postgres
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

volumes:
  postgres_data: {}
  imgproxy_cache: {}

networks:
  frontend:
    name: chult_frontend
  backend:
    name: chult_backend
    internal: true
